# %%[sec_1]
from tespy.networks import Network

# create a network object with R134a as fluid
my_plant = Network()
my_plant.set_attr(T_unit='C', p_unit='bar', h_unit='kJ / kg')
# %%[sec_2]
from tespy.components import (
    CycleCloser, Pump, Condenser, Turbine, HeatExchanger, Source, Sink
)

cc = CycleCloser('cycle closer')
sg = HeatExchanger('steam generator')
mc = Condenser('main condenser')
tu = Turbine('steam turbine')
fp = Pump('feed pump')

cwso = Source('cooling water source')
cwsi = Sink('cooling water sink')
stso = Source('Steam Source')
stsi = Sink('Steam Sink')

from tespy.connections import Connection

c1 = Connection(cc, 'out1', tu, 'in1', label='1')
c2 = Connection(tu, 'out1', mc, 'in1', label='2')
c3 = Connection(mc, 'out1', fp, 'in1', label='3')
c4 = Connection(fp, 'out1', sg, 'in1', label='4')
c0 = Connection(sg, 'out1', cc, 'in1', label='0')

my_plant.add_conns(c1, c2, c3, c4, c0)

c11 = Connection(cwso, 'out1', mc, 'in2', label='11')
c12 = Connection(mc, 'out2', cwsi, 'in1', label='12')
c21 = Connection(stso, 'out1', sg, 'in2', label='21')
c22 = Connection(sg, 'out2', stsi, 'in1', label='22')

my_plant.add_conns(c11, c12, c21, c22)
# %%[sec_3]
mc.set_attr(pr1=0.98, pr2=1)
sg.set_attr(pr1=0.98, pr2=1)
tu.set_attr(eta_s=0.9)
fp.set_attr(eta_s=0.75)

c11.set_attr(T=20, p=1.2, fluid={'water': 1})
c12.set_attr(T=25)
c21.set_attr(T=150, p=2.0, fluid={'water': 1})
c22.set_attr(T=100)
c1.set_attr(T=90, p=30, m=10, fluid={'R1234yf': 1})
c2.set_attr(p=7)

def run_orc_model():
    my_plant.solve(mode='design')
    my_plant.print_results()
    result_dict = {}
    result_dict.update(
        {cp.label: cp.get_plotting_data()[1] for cp in my_plant.comps['object']
         if cp.get_plotting_data() is not None})
    return result_dict 

orc_result = run_orc_model()

# %%[sec_4]
from fluprodia import FluidPropertyDiagram
import matplotlib.pyplot as plt
import numpy as np

diagram = FluidPropertyDiagram('R1234yf')
diagram.set_unit_system(T='Â°C', p='bar', h='kJ/kg')

for key, data in orc_result.items():
   orc_result[key]['datapoints'] = diagram.calc_individual_isoline(**data)

fig, ax = plt.subplots(1, figsize=(20, 10))
mydata = {
    'Q': {'values': np.linspace(0, 1, 2)},
    'T': {
        'values': np.arange(-25, 150, 25),
        'style': {'color': '#000000'}
    },
    'v': {'values': np.array([])}
}

diagram.set_isolines(T=mydata["T"]["values"], Q=mydata["Q"]["values"], v=mydata["v"]["values"])
diagram.calc_isolines()
diagram.draw_isolines(fig, ax, 'Ts', x_min=900, x_max=1800, y_min=0, y_max=125)

for key in orc_result.keys():
    datapoints = orc_result[key]['datapoints']
    _ = ax.plot(datapoints['s'], datapoints['T'], color='#ff0000')
    _ = ax.scatter(datapoints['s'][0], datapoints['T'][0], color='#ff0000')

ax.set_xlabel('Entropy, s [J/kg.K]', fontsize=14)
ax.set_ylabel('Temperature, T [K]', fontsize=14)
ax.set_title('T-s Diagram for ORC System', fontsize=18)
plt.tight_layout()
fig.savefig('orc_TS_diagram.svg')